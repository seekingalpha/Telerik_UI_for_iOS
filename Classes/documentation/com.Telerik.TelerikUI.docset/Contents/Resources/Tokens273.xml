<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/TKCalendarPresenter.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/TKCalendarPresenter</TokenIdentifier>
			<Abstract type="html">The TKCalendarPresenter protocol is adopted by an object that displays the calendar component in specific view mode.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
            
			
			<NodeRef refid="273"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/update:</TokenIdentifier>
			<Abstract type="html">Called when the presenter should update its content. (e.g. navigation has occurred)</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)update:(BOOL)reset</Declaration>
			<Parameters>
				<Parameter>
					<Name>reset</Name>
					<Abstract type="html">Determines whether all visual elements should be reset.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/update:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/updateState:</TokenIdentifier>
			<Abstract type="html">Called when the presenter should update all states. (e.g. a different date was selected)</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)updateState:(NSDate *)lastSelected</Declaration>
			<Parameters>
				<Parameter>
					<Name>lastSelected</Name>
					<Abstract type="html">The last selected date.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateState:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/navigateForward:</TokenIdentifier>
			<Abstract type="html">The presenter should navigate one screen forward based on its context. Do not call this method directly, use TKCalendar.navigateForward instead.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (BOOL)navigateForward:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specifies whether to use animation when navigating.
*</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if navigation was scuccessfull.</Abstract></ReturnValue>
			<Anchor>//api/name/navigateForward:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/navigateBack:</TokenIdentifier>
			<Abstract type="html">The presenter should navigate one screen backward based on its context. Do not call this method directly, use TKCalendar.navigateBack instead.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (BOOL)navigateBack:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specifies whether to use animation when navigating.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if navigation was scuccessfull.</Abstract></ReturnValue>
			<Anchor>//api/name/navigateBack:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/navigateToDate:animated:</TokenIdentifier>
			<Abstract type="html">The presenter should navigate to specific date. Do not call this method directly, use TKCalendar.navigateTodate:animated: instead.
*</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)navigateToDate:(NSDate *)date animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">The date to which the presenter should navigate.</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Specifies whether to use animation when navigating.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/navigateToDate:animated:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarPresenter/dateFromPoint:</TokenIdentifier>
			<Abstract type="html">Returns a date based on the provided coordinates.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (NSDate *)dateFromPoint:(CGPoint)pt</Declaration>
			<Parameters>
				<Parameter>
					<Name>pt</Name>
					<Abstract type="html">The coordinates for the requested date.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of NSDate if successful, nil otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/dateFromPoint:</Anchor>
            <NodeRef refid="273"/>
		</Token>
		
        
        
	</File>
</Tokens>