<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/TKCalendarDelegate.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/TKCalendarDelegate</TokenIdentifier>
			<Abstract type="html">The methods declared by the TKCalendarDelegate protocol allow the adopting delegate to respond to messages from the TKCalendar class and thus respond to, and in some affect, operations such as selection, navigation and customizing the visual appearance.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
            
			
			<NodeRef refid="269"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:shouldSelectDate:</TokenIdentifier>
			<Abstract type="html">Returns a boolean value indicating whether the specified date can be selected.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (BOOL)calendar:(TKCalendar *)calendar shouldSelectDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component instance requesting this information.</Abstract>
				</Parameter><Parameter>
					<Name>date</Name>
					<Abstract type="html">The date which is about to be selected.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the date can be selected.</Abstract></ReturnValue>
			<Anchor>//api/name/calendar:shouldSelectDate:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:didSelectDate:</TokenIdentifier>
			<Abstract type="html">Called after selecting a date.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar didSelectDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component for which the selection occurred.</Abstract>
				</Parameter><Parameter>
					<Name>date</Name>
					<Abstract type="html">The date that was selected.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:didSelectDate:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:didDeselectedDate:</TokenIdentifier>
			<Abstract type="html">Called after deselecting a date.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar didDeselectedDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component for which the selection change occurred.</Abstract>
				</Parameter><Parameter>
					<Name>date</Name>
					<Abstract type="html">The date that was deselected.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:didDeselectedDate:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:willNavigateToDate:</TokenIdentifier>
			<Abstract type="html">Called before navigating to specific date.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar willNavigateToDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component where navigation occurs.</Abstract>
				</Parameter><Parameter>
					<Name>date</Name>
					<Abstract type="html">The date which is about to be displayed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:willNavigateToDate:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:didNavigateToDate:</TokenIdentifier>
			<Abstract type="html">Called after navigating to specific date.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar didNavigateToDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component where navigation occurred.</Abstract>
				</Parameter><Parameter>
					<Name>date</Name>
					<Abstract type="html">The date that was displayed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:didNavigateToDate:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:didChangedViewModeFrom:to:</TokenIdentifier>
			<Abstract type="html">Called after view mode has changed.
*</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar didChangedViewModeFrom:(TKCalendarViewMode)previousViewMode to:(TKCalendarViewMode)viewMode</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component for which the view mode was changed.</Abstract>
				</Parameter><Parameter>
					<Name>previousViewMode</Name>
					<Abstract type="html">The previous view mode.</Abstract>
				</Parameter><Parameter>
					<Name>viewMode</Name>
					<Abstract type="html">The actual view mode.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:didChangedViewModeFrom:to:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:viewForCellOfKind:</TokenIdentifier>
			<Abstract type="html">Returns an instance of TKCalendarCell specific for the requested cell type.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (TKCalendarCell *)calendar:(TKCalendar *)calendar viewForCellOfKind:(TKCalendarCellType)cellType</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar instance requesting this information.</Abstract>
				</Parameter><Parameter>
					<Name>cellType</Name>
					<Abstract type="html">The cell type which determines the TKCalendarCell instance.
*</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of TKCalendarCell if the cell should be customized, nil otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/calendar:viewForCellOfKind:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/TKCalendarDelegate/calendar:updateVisualsForCell:</TokenIdentifier>
			<Abstract type="html">Called when a cell needs to update its visual state.</Abstract>
			<DeclaredIn>TKCalendar.h</DeclaredIn>
			
			<Declaration>- (void)calendar:(TKCalendar *)calendar updateVisualsForCell:(TKCalendarCell *)cell</Declaration>
			<Parameters>
				<Parameter>
					<Name>calendar</Name>
					<Abstract type="html">The calendar component where the cell state was changed.</Abstract>
				</Parameter><Parameter>
					<Name>cell</Name>
					<Abstract type="html">The cell that has changed its state.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/calendar:updateVisualsForCell:</Anchor>
            <NodeRef refid="269"/>
		</Token>
		
        
        
	</File>
</Tokens>